Jekyll 遍历你的网站寻找以YAML前置语法开头的文件进行处理。对每一个此类文件，jekyll都通过liquid模板系统提供了很多数据供使用。以下就是可以提供的数据的参照。

全局变量：

site:全站的信息和_config.yml中所有的配置

page:除了前置语法外还包括url和content

content:在layout文件中，这个表示子视图的内容。这个变量是用来将提交的内容嵌入到模板中的，而不是用在post文件或者page文件中的

paginator:当分页被设置的时候，这个变量就是可以用的。

Site:

site.time:运行jekyll时的时间

site.posts:按时间从近到远排列的所有的post的集合

site.related_posts:如果被处理的page是一个post,那么这个变量就会包含十个相关的post.默认情况下，这些都是低质量但是较快运算出来的，高质量的运行速度慢的可以通过命令参数--lsi（latest semantic indexing的缩写）。

site.categories.CATEGORIY:在CATEGORY下的所有post

site.tags.TAG:在TAG下的所有post

site.[CONFIGURATION_DATA]:在_config.yml中的配置比如url:http://example.com,如果在配置文件中要用到的话就可以直接用变量{{ site.url }}.但是需要注意的是在auto模式下，Jekyll并不会自动解析_config.yml中的配置改变，所以一旦改变就要重启。

site.pages:所有没有被post但是有YAML前置语法的page

Page:

page.content:未被提交的page的内容

page.title:Post的标题

page.url：此post的url地址但是不包括域名，比如/2008/12/14/my-post

page.date：此post的分配的时间，在前文中提到可以在前置语法中用date变量改写

page.id:post的id，比如/2008/12/14/my-post

page.categories:此post所属的种类。这个种类是在_posts之前的目录来决定的，比如/work/code/_posts/2008。。。，则此post的种类就是work,code.前文中讲到这也可以在前置语法中中设置。

page.tags:在此标签下的所有posts，也可以在前置语法中设置。

page.next:按时间排序的下一篇文章

page.previous：按时间排序叫老的一篇文章

注意：任何一个在前置语法中对页面的设置都会自动在page中。比如在前置语法中设置custom_css:true，那么在page.custom_css中的值也会相应的改变

PPaginator:

注意：只可以用在index文件中

paginator.per_page:每个page的post数

paginator.posts:此页面能提供的posts

paginator.total_posts:此页面的post个数

paginator.total_pages:所有的页面数

paginator.page:当前页面的页数

paginator.previous_page/paginator.next_page:前一个/下一个页面的页数

&nbsp;

&nbsp;